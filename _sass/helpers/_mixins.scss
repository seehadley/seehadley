// adapted from Solid: http://solid.buzzfeed.com/
@mixin media-query($breakpoint) {
  @if (map-get($breakpoints, $breakpoint)) == null {
      @content;
  }
  @else {
      @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
          @content;
      }
  }
}

@mixin generate-breakpoint-prefixes {
  // generate prefixed classes
  @each $breakpoint-name, $breakpoint-value in $breakpoints {
      $breakpoint-prefix: ".u-#{$breakpoint-name}-";

      @include media-query($breakpoint-name) {
          #{$breakpoint-prefix} {
              @content;
          }
      }
  }
}

// Typography
@mixin link-underline($color) {
  
  @if ($color == dark) {
    border-bottom: $link-border-style $underline-color-dark;

    &:hover {
      border-color: $underline-color-dark-hover;
    }
  }
  @else {
    border-bottom: $link-border-style $underline-color-light;

    &:hover {
      border-color: $underline-color-light-hover;
    }
  }
}

// https://www.viget.com/articles/angled-edges-with-css-masks-and-transforms
// mixin
@mixin angle($pseudo, $flip: false, $angle: 1.5deg) {
  // Possible values for $pseudo are: before, after, both
  @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {
    position: relative;
    z-index: 1;
    $selector: if($pseudo == 'both', '&:before,&:after', '&:#{$pseudo}');

    #{$selector} {
      background: inherit;
      content: '';
      display: block;
      height: 50%;
      left: 0;
      position: absolute;
      right: 0;
      z-index: -1;
      -webkit-backface-visibility: hidden; // for Chrome Windows
    }

    @if $pseudo == 'before' {
      #{$selector} {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }
    }

    @if $pseudo == 'after' {
      #{$selector} {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 100%;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }

    @if $pseudo == 'both' {
      &:before {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }

      &:after {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }
  }
}
